# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000


Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Вывод сети и маски должен быть упорядочен также, как в примере:
- столбцами
- ширина столбца 10 символов (в двоичном формате
  надо добавить два пробела между столбцами
  для разделения октетов между собой)


Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""
from ipaddress import ip_address


device_id = input ("Введите IP устройства: ")
ip_address = str(device_id[:-3].split(".")) ##выделение адреса из введенной строки 
ip_address = (ip_address.replace("[","").replace("]","").replace("'","").replace(",","")).split() ##вычищение адреса от мусора
mask = device_id[-2:] ##получение маски
##mask_count = int((device_id[-2:]),10)
mask_bin = '1' * int((mask),10) + ('0'* (32-int((mask),10)))
#mask_id = 32 - int(mask, 10)
ip_bin = ('{:08b}'.format(int((ip_address[0]),10)) + '{:08b}'.format(int((ip_address[1]),10)) + '{:08b}'.format(int((ip_address[2]),10)) + '{:08b}'.format(int((ip_address[3]),10)))[0:(int((device_id[-2:]),10))] + '0'*(32 - int(mask, 10))
ip = '''
 Network:
 {0:<10}  {1:<10}  {2:<10}  {3:<10}
 {4:08}    {5:08}    {6:08}    {7:08}
'''  ## переменная для вывода в соответствующем форматировани ## приведение маски двоичный вид. нужно посмотреть сюда на 10 у инта

mask_out = '''
 Mask:
 /{0}
 {1:<10}  {2:<10}  {3:<10}  {4:<10}
 {5:<10}  {6:<10}  {7:<10}  {8:<10}
'''

print(ip.format(int((ip_bin[0:8]),2), int((ip_bin[8:16]),2), int((ip_bin[16:24]),2), int((ip_bin[24:32]),2), int((ip_bin[0:8]),10), int((ip_bin[8:16]),10), int((ip_bin[16:24]),10), int((ip_bin[24:32]),10)))
print(mask_out.format(mask, int((mask_bin[0:8]),2), int((mask_bin[8:16]),2), int((mask_bin[16:24]),2), int((mask_bin[24:32]),2), mask_bin[0:8], mask_bin[8:16], mask_bin[16:24], mask_bin[24:32]))